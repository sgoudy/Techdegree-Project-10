// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iaGC8N7icN64RQS5kdk5ev
// Component: VvQTp2Yg1t2o
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Sidebar from "../../Sidebar"; // plasmic-import: 4dji5oGoR6/component
import ProfileIcon from "../../ProfileIcon"; // plasmic-import: yIW795alBg/component
import SearchIcon from "../../SearchIcon"; // plasmic-import: 9a0YfTNxDA/component
import AlertBellIcon from "../../AlertBellIcon"; // plasmic-import: 8lZPU92Ytv/component
import Fire from "../../Fire"; // plasmic-import: Lix0pM24ds/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_fire_spot.module.css"; // plasmic-import: iaGC8N7icN64RQS5kdk5ev/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: VvQTp2Yg1t2o/css

import Polygon1Icon from "./icons/PlasmicIcon__Polygon1"; // plasmic-import: 0k0WA1LIx4K/icon
import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: F1GpC1vB1p_/icon
import AlertCircleIcon from "./icons/PlasmicIcon__AlertCircle"; // plasmic-import: vAuCRuqwxP/icon
import ellipse1HjnyW7Tbk from "./images/ellipse1.svg"; // plasmic-import: hjnyW7Tbk/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  iPhone11ProMax2?: p.Flex<"div">;
  screenShot20210714At3392?: p.Flex<"div">;
  sidebar?: p.Flex<typeof Sidebar>;
  avatar?: p.Flex<"div">;
  miscIconsBackground?: p.Flex<"div">;
  iconsButton?: p.Flex<"div">;
  profileIcon?: p.Flex<typeof ProfileIcon>;
  searchIcon?: p.Flex<typeof SearchIcon>;
  alertBellIcon?: p.Flex<typeof AlertBellIcon>;
  group2?: p.Flex<"div">;
  rectangle3?: p.Flex<"div">;
  reportAFire?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  fire?: p.Flex<typeof Fire>;
  img?: p.Flex<"img">;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"iPhone11ProMax2"}
            data-plasmic-override={overrides.iPhone11ProMax2}
            className={classNames(defaultcss.all, sty.iPhone11ProMax2)}
          >
            <div
              data-plasmic-name={"screenShot20210714At3392"}
              data-plasmic-override={overrides.screenShot20210714At3392}
              className={classNames(
                defaultcss.all,
                sty.screenShot20210714At3392
              )}
            >
              <Polygon1Icon
                className={classNames(defaultcss.all, sty.svg__hhWtm)}
                role={"img"}
              />
            </div>

            <Sidebar
              data-plasmic-name={"sidebar"}
              data-plasmic-override={overrides.sidebar}
              className={classNames("__wab_instance", sty.sidebar)}
            />

            <div
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              className={classNames(defaultcss.all, sty.avatar)}
            >
              <div
                data-plasmic-name={"miscIconsBackground"}
                data-plasmic-override={overrides.miscIconsBackground}
                className={classNames(defaultcss.all, sty.miscIconsBackground)}
              >
                <div
                  data-plasmic-name={"iconsButton"}
                  data-plasmic-override={overrides.iconsButton}
                  className={classNames(defaultcss.all, sty.iconsButton)}
                />
              </div>

              <ProfileIcon
                data-plasmic-name={"profileIcon"}
                data-plasmic-override={overrides.profileIcon}
                className={classNames("__wab_instance", sty.profileIcon)}
              />
            </div>

            <SearchIcon
              data-plasmic-name={"searchIcon"}
              data-plasmic-override={overrides.searchIcon}
              className={classNames("__wab_instance", sty.searchIcon)}
            />

            <AlertBellIcon
              data-plasmic-name={"alertBellIcon"}
              data-plasmic-override={overrides.alertBellIcon}
              className={classNames("__wab_instance", sty.alertBellIcon)}
            />

            <HomeIcon
              className={classNames(defaultcss.all, sty.svg__gMloK)}
              role={"img"}
            />

            <div
              data-plasmic-name={"group2"}
              data-plasmic-override={overrides.group2}
              className={classNames(defaultcss.all, sty.group2)}
            >
              <div
                data-plasmic-name={"rectangle3"}
                data-plasmic-override={overrides.rectangle3}
                className={classNames(defaultcss.all, sty.rectangle3)}
              />

              <div
                data-plasmic-name={"reportAFire"}
                data-plasmic-override={overrides.reportAFire}
                className={classNames(defaultcss.all, sty.reportAFire)}
              >
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox
                  )}
                >
                  {"Report A Fire"}
                </div>
              </div>
            </div>

            <Fire
              data-plasmic-name={"fire"}
              data-plasmic-override={overrides.fire}
              className={classNames("__wab_instance", sty.fire)}
            />

            <img
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(defaultcss.img, sty.img)}
              role={"img"}
              src={ellipse1HjnyW7Tbk}
            />

            <AlertCircleIcon
              className={classNames(defaultcss.all, sty.svg__kcm90)}
              role={"img"}
            />

            <AlertCircleIcon
              className={classNames(defaultcss.all, sty.svg__xYOgx)}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "iPhone11ProMax2",
    "screenShot20210714At3392",
    "sidebar",
    "avatar",
    "miscIconsBackground",
    "iconsButton",
    "profileIcon",
    "searchIcon",
    "alertBellIcon",
    "group2",
    "rectangle3",
    "reportAFire",
    "freeBox",
    "fire",
    "img"
  ],
  iPhone11ProMax2: [
    "iPhone11ProMax2",
    "screenShot20210714At3392",
    "sidebar",
    "avatar",
    "miscIconsBackground",
    "iconsButton",
    "profileIcon",
    "searchIcon",
    "alertBellIcon",
    "group2",
    "rectangle3",
    "reportAFire",
    "freeBox",
    "fire",
    "img"
  ],
  screenShot20210714At3392: ["screenShot20210714At3392"],
  sidebar: ["sidebar"],
  avatar: ["avatar", "miscIconsBackground", "iconsButton", "profileIcon"],
  miscIconsBackground: ["miscIconsBackground", "iconsButton"],
  iconsButton: ["iconsButton"],
  profileIcon: ["profileIcon"],
  searchIcon: ["searchIcon"],
  alertBellIcon: ["alertBellIcon"],
  group2: ["group2", "rectangle3", "reportAFire", "freeBox"],
  rectangle3: ["rectangle3"],
  reportAFire: ["reportAFire", "freeBox"],
  freeBox: ["freeBox"],
  fire: ["fire"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  iPhone11ProMax2: "div";
  screenShot20210714At3392: "div";
  sidebar: typeof Sidebar;
  avatar: "div";
  miscIconsBackground: "div";
  iconsButton: "div";
  profileIcon: typeof ProfileIcon;
  searchIcon: typeof SearchIcon;
  alertBellIcon: typeof AlertBellIcon;
  group2: "div";
  rectangle3: "div";
  reportAFire: "div";
  freeBox: "div";
  fire: typeof Fire;
  img: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomepage__Fetches;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iPhone11ProMax2: makeNodeComponent("iPhone11ProMax2"),
    screenShot20210714At3392: makeNodeComponent("screenShot20210714At3392"),
    sidebar: makeNodeComponent("sidebar"),
    avatar: makeNodeComponent("avatar"),
    miscIconsBackground: makeNodeComponent("miscIconsBackground"),
    iconsButton: makeNodeComponent("iconsButton"),
    profileIcon: makeNodeComponent("profileIcon"),
    searchIcon: makeNodeComponent("searchIcon"),
    alertBellIcon: makeNodeComponent("alertBellIcon"),
    group2: makeNodeComponent("group2"),
    rectangle3: makeNodeComponent("rectangle3"),
    reportAFire: makeNodeComponent("reportAFire"),
    freeBox: makeNodeComponent("freeBox"),
    fire: makeNodeComponent("fire"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
