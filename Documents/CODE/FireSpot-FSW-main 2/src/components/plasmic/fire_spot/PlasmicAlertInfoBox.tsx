// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iaGC8N7icN64RQS5kdk5ev
// Component: ejg9ScpLaN
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_fire_spot.module.css"; // plasmic-import: iaGC8N7icN64RQS5kdk5ev/projectcss
import * as sty from "./PlasmicAlertInfoBox.module.css"; // plasmic-import: ejg9ScpLaN/css

export type PlasmicAlertInfoBox__VariantMembers = {};

export type PlasmicAlertInfoBox__VariantsArgs = {};
type VariantPropType = keyof PlasmicAlertInfoBox__VariantsArgs;
export const PlasmicAlertInfoBox__VariantProps = new Array<VariantPropType>();

export type PlasmicAlertInfoBox__ArgsType = {};
type ArgPropType = keyof PlasmicAlertInfoBox__ArgsType;
export const PlasmicAlertInfoBox__ArgProps = new Array<ArgPropType>();

export type PlasmicAlertInfoBox__OverridesType = {
  root?: p.Flex<"div">;
  background?: p.Flex<"div">;
  title?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  body?: p.Flex<"div">;
  button?: p.Flex<"div">;
  labeledCentered?: p.Flex<"div">;
  background2?: p.Flex<"div">;
  border?: p.Flex<"div">;
  label?: p.Flex<"div">;
  label2?: p.Flex<"div">;
};

export interface DefaultAlertInfoBoxProps {
  className?: string;
}

function PlasmicAlertInfoBox__RenderFunc(props: {
  variants: PlasmicAlertInfoBox__VariantsArgs;
  args: PlasmicAlertInfoBox__ArgsType;
  overrides: PlasmicAlertInfoBox__OverridesType;
  dataFetches?: PlasmicAlertInfoBox__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"background"}
        data-plasmic-override={overrides.background}
        className={classNames(defaultcss.all, sty.background)}
      />

      <div
        data-plasmic-name={"title"}
        data-plasmic-override={overrides.title}
        className={classNames(defaultcss.all, sty.title)}
      >
        <div
          data-plasmic-name={"title2"}
          data-plasmic-override={overrides.title2}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.title2
          )}
        >
          {"Alert Area"}
        </div>
      </div>

      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(defaultcss.all, defaultcss.__wab_text, sty.body)}
      >
        {"From Date - To Date\nCity/ Town:\nNeighborhood:\n\n\n"}
      </div>

      <div
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(defaultcss.all, sty.button)}
      >
        <div
          data-plasmic-name={"labeledCentered"}
          data-plasmic-override={overrides.labeledCentered}
          className={classNames(defaultcss.all, sty.labeledCentered)}
        >
          {false ? (
            <div
              data-plasmic-name={"background2"}
              data-plasmic-override={overrides.background2}
              className={classNames(defaultcss.all, sty.background2)}
            />
          ) : null}

          <div
            data-plasmic-name={"border"}
            data-plasmic-override={overrides.border}
            className={classNames(defaultcss.all, sty.border)}
          />

          <div
            data-plasmic-name={"label"}
            data-plasmic-override={overrides.label}
            className={classNames(defaultcss.all, sty.label)}
          >
            <div
              data-plasmic-name={"label2"}
              data-plasmic-override={overrides.label2}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.label2
              )}
            >
              {"Report A Fire"}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "background",
    "title",
    "title2",
    "body",
    "button",
    "labeledCentered",
    "background2",
    "border",
    "label",
    "label2"
  ],
  background: ["background"],
  title: ["title", "title2"],
  title2: ["title2"],
  body: ["body"],
  button: [
    "button",
    "labeledCentered",
    "background2",
    "border",
    "label",
    "label2"
  ],
  labeledCentered: [
    "labeledCentered",
    "background2",
    "border",
    "label",
    "label2"
  ],
  background2: ["background2"],
  border: ["border"],
  label: ["label", "label2"],
  label2: ["label2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  background: "div";
  title: "div";
  title2: "div";
  body: "div";
  button: "div";
  labeledCentered: "div";
  background2: "div";
  border: "div";
  label: "div";
  label2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAlertInfoBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAlertInfoBox__VariantsArgs;
    args?: PlasmicAlertInfoBox__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAlertInfoBox__Fetches;
  } & Omit<PlasmicAlertInfoBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAlertInfoBox__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAlertInfoBox__ArgProps,
      internalVariantPropNames: PlasmicAlertInfoBox__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAlertInfoBox__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAlertInfoBox";
  } else {
    func.displayName = `PlasmicAlertInfoBox.${nodeName}`;
  }
  return func;
}

export const PlasmicAlertInfoBox = Object.assign(
  // Top-level PlasmicAlertInfoBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    background: makeNodeComponent("background"),
    title: makeNodeComponent("title"),
    title2: makeNodeComponent("title2"),
    body: makeNodeComponent("body"),
    button: makeNodeComponent("button"),
    labeledCentered: makeNodeComponent("labeledCentered"),
    background2: makeNodeComponent("background2"),
    border: makeNodeComponent("border"),
    label: makeNodeComponent("label"),
    label2: makeNodeComponent("label2"),

    // Metadata about props expected for PlasmicAlertInfoBox
    internalVariantProps: PlasmicAlertInfoBox__VariantProps,
    internalArgProps: PlasmicAlertInfoBox__ArgProps
  }
);

export default PlasmicAlertInfoBox;
/* prettier-ignore-end */
