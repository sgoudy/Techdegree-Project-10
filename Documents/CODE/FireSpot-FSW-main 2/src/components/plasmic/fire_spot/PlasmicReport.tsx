// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iaGC8N7icN64RQS5kdk5ev
// Component: 4xagdXrZML
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_fire_spot.module.css"; // plasmic-import: iaGC8N7icN64RQS5kdk5ev/projectcss
import * as sty from "./PlasmicReport.module.css"; // plasmic-import: 4xagdXrZML/css

import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: saqBp-KweY/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: _hIlKDMChB/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: lIZFbyKS7s/icon
import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: F1GpC1vB1p_/icon
import Polygon1Icon from "./icons/PlasmicIcon__Polygon1"; // plasmic-import: 0k0WA1LIx4K/icon
import AlertCircleIcon from "./icons/PlasmicIcon__AlertCircle"; // plasmic-import: vAuCRuqwxP/icon
import Vector4Icon from "./icons/PlasmicIcon__Vector4"; // plasmic-import: qXJme5p6SBx/icon
import Vector5Icon from "./icons/PlasmicIcon__Vector5"; // plasmic-import: IBr-aXC3d5G/icon
import ellipse8EkAxWz8AOa from "./images/ellipse8.svg"; // plasmic-import: EKAxWZ8aOa/picture
import ellipse9C1IxVbvjpGl from "./images/ellipse9.svg"; // plasmic-import: C1IxVbvjpGl/picture

export type PlasmicReport__VariantMembers = {};

export type PlasmicReport__VariantsArgs = {};
type VariantPropType = keyof PlasmicReport__VariantsArgs;
export const PlasmicReport__VariantProps = new Array<VariantPropType>();

export type PlasmicReport__ArgsType = {};
type ArgPropType = keyof PlasmicReport__ArgsType;
export const PlasmicReport__ArgProps = new Array<ArgPropType>();

export type PlasmicReport__OverridesType = {
  root?: p.Flex<"div">;
  iPhone11ProMax5?: p.Flex<"div">;
  screenShot20210714At3392?: p.Flex<"div">;
  rectangle1?: p.Flex<"div">;
  avatar?: p.Flex<"div">;
  miscIconsBackground?: p.Flex<"div">;
  iconsButton?: p.Flex<"div">;
  _01?: p.Flex<"div">;
  textOnlyWithButton?: p.Flex<"div">;
  background?: p.Flex<"div">;
  title?: p.Flex<"div">;
  title2?: p.Flex<"div">;
  body?: p.Flex<"div">;
  button?: p.Flex<"div">;
  labeledCentered?: p.Flex<"div">;
  background2?: p.Flex<"div">;
  border?: p.Flex<"div">;
  label?: p.Flex<"div">;
  label2?: p.Flex<"div">;
  button2?: p.Flex<"div">;
  labeledCentered2?: p.Flex<"div">;
  background3?: p.Flex<"div">;
  border2?: p.Flex<"div">;
  label3?: p.Flex<"div">;
  label4?: p.Flex<"div">;
};

export interface DefaultReportProps {
  className?: string;
}

function PlasmicReport__RenderFunc(props: {
  variants: PlasmicReport__VariantsArgs;
  args: PlasmicReport__ArgsType;
  overrides: PlasmicReport__OverridesType;
  dataFetches?: PlasmicReport__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"iPhone11ProMax5"}
            data-plasmic-override={overrides.iPhone11ProMax5}
            className={classNames(defaultcss.all, sty.iPhone11ProMax5)}
          >
            <div
              data-plasmic-name={"screenShot20210714At3392"}
              data-plasmic-override={overrides.screenShot20210714At3392}
              className={classNames(
                defaultcss.all,
                sty.screenShot20210714At3392
              )}
            />

            <div
              data-plasmic-name={"rectangle1"}
              data-plasmic-override={overrides.rectangle1}
              className={classNames(defaultcss.all, sty.rectangle1)}
            />

            <div
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              className={classNames(defaultcss.all, sty.avatar)}
            >
              <div
                data-plasmic-name={"miscIconsBackground"}
                data-plasmic-override={overrides.miscIconsBackground}
                className={classNames(defaultcss.all, sty.miscIconsBackground)}
              >
                <div
                  data-plasmic-name={"iconsButton"}
                  data-plasmic-override={overrides.iconsButton}
                  className={classNames(defaultcss.all, sty.iconsButton)}
                />
              </div>

              <VectorIcon
                className={classNames(defaultcss.all, sty.svg__wrvQs)}
                role={"img"}
              />
            </div>

            <Vector2Icon
              className={classNames(defaultcss.all, sty.svg__fDFh)}
              role={"img"}
            />

            <Vector3Icon
              className={classNames(defaultcss.all, sty.svg___9GlI)}
              role={"img"}
            />

            <HomeIcon
              className={classNames(defaultcss.all, sty.svg__ihsKi)}
              role={"img"}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__lx4Ih)}
              role={"img"}
              src={ellipse8EkAxWz8AOa}
            />

            <Polygon1Icon
              className={classNames(defaultcss.all, sty.svg__tbWqG)}
              role={"img"}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__e6Hyn)}
              role={"img"}
              src={ellipse9C1IxVbvjpGl}
            />

            <AlertCircleIcon
              className={classNames(defaultcss.all, sty.svg___8TD0)}
              role={"img"}
            />

            <AlertCircleIcon
              className={classNames(defaultcss.all, sty.svg__jPIhd)}
              role={"img"}
            />

            <div
              data-plasmic-name={"_01"}
              data-plasmic-override={overrides._01}
              className={classNames(defaultcss.all, sty._01)}
            >
              <div
                data-plasmic-name={"textOnlyWithButton"}
                data-plasmic-override={overrides.textOnlyWithButton}
                className={classNames(defaultcss.all, sty.textOnlyWithButton)}
              >
                <div
                  data-plasmic-name={"background"}
                  data-plasmic-override={overrides.background}
                  className={classNames(defaultcss.all, sty.background)}
                />

                <div
                  data-plasmic-name={"title"}
                  data-plasmic-override={overrides.title}
                  className={classNames(defaultcss.all, sty.title)}
                >
                  <div
                    data-plasmic-name={"title2"}
                    data-plasmic-override={overrides.title2}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.title2
                    )}
                  >
                    {"Report a Fire Form"}
                  </div>
                </div>

                <div
                  data-plasmic-name={"body"}
                  data-plasmic-override={overrides.body}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.body
                  )}
                >
                  {
                    "Date:\nTime:\nLocation: (Option to drop a pin...)\n\nSource Known?\n\n\n\n"
                  }
                </div>

                {false ? (
                  <div
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames(defaultcss.all, sty.button)}
                  >
                    <div
                      data-plasmic-name={"labeledCentered"}
                      data-plasmic-override={overrides.labeledCentered}
                      className={classNames(
                        defaultcss.all,
                        sty.labeledCentered
                      )}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"background2"}
                          data-plasmic-override={overrides.background2}
                          className={classNames(
                            defaultcss.all,
                            sty.background2
                          )}
                        />
                      ) : null}

                      <div
                        data-plasmic-name={"border"}
                        data-plasmic-override={overrides.border}
                        className={classNames(defaultcss.all, sty.border)}
                      />

                      <div
                        data-plasmic-name={"label"}
                        data-plasmic-override={overrides.label}
                        className={classNames(defaultcss.all, sty.label)}
                      >
                        <div
                          data-plasmic-name={"label2"}
                          data-plasmic-override={overrides.label2}
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.label2
                          )}
                        >
                          {"Report A Fire"}
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>

              {false ? (
                <Vector4Icon
                  className={classNames(defaultcss.all, sty.svg___4Ll66)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Vector4Icon
                  className={classNames(defaultcss.all, sty.svg__k5GJi)}
                  role={"img"}
                />
              ) : null}
            </div>

            <div
              data-plasmic-name={"button2"}
              data-plasmic-override={overrides.button2}
              className={classNames(defaultcss.all, sty.button2)}
            >
              <div
                data-plasmic-name={"labeledCentered2"}
                data-plasmic-override={overrides.labeledCentered2}
                className={classNames(defaultcss.all, sty.labeledCentered2)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"background3"}
                    data-plasmic-override={overrides.background3}
                    className={classNames(defaultcss.all, sty.background3)}
                  />
                ) : null}

                <div
                  data-plasmic-name={"border2"}
                  data-plasmic-override={overrides.border2}
                  className={classNames(defaultcss.all, sty.border2)}
                />

                <div
                  data-plasmic-name={"label3"}
                  data-plasmic-override={overrides.label3}
                  className={classNames(defaultcss.all, sty.label3)}
                >
                  <div
                    data-plasmic-name={"label4"}
                    data-plasmic-override={overrides.label4}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.label4
                    )}
                  >
                    {"Submit"}
                  </div>
                </div>
              </div>
            </div>

            <Vector5Icon
              className={classNames(defaultcss.all, sty.svg__cJwt)}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "iPhone11ProMax5",
    "screenShot20210714At3392",
    "rectangle1",
    "avatar",
    "miscIconsBackground",
    "iconsButton",
    "_01",
    "textOnlyWithButton",
    "background",
    "title",
    "title2",
    "body",
    "button",
    "labeledCentered",
    "background2",
    "border",
    "label",
    "label2",
    "button2",
    "labeledCentered2",
    "background3",
    "border2",
    "label3",
    "label4"
  ],
  iPhone11ProMax5: [
    "iPhone11ProMax5",
    "screenShot20210714At3392",
    "rectangle1",
    "avatar",
    "miscIconsBackground",
    "iconsButton",
    "_01",
    "textOnlyWithButton",
    "background",
    "title",
    "title2",
    "body",
    "button",
    "labeledCentered",
    "background2",
    "border",
    "label",
    "label2",
    "button2",
    "labeledCentered2",
    "background3",
    "border2",
    "label3",
    "label4"
  ],
  screenShot20210714At3392: ["screenShot20210714At3392"],
  rectangle1: ["rectangle1"],
  avatar: ["avatar", "miscIconsBackground", "iconsButton"],
  miscIconsBackground: ["miscIconsBackground", "iconsButton"],
  iconsButton: ["iconsButton"],
  _01: [
    "_01",
    "textOnlyWithButton",
    "background",
    "title",
    "title2",
    "body",
    "button",
    "labeledCentered",
    "background2",
    "border",
    "label",
    "label2"
  ],
  textOnlyWithButton: [
    "textOnlyWithButton",
    "background",
    "title",
    "title2",
    "body",
    "button",
    "labeledCentered",
    "background2",
    "border",
    "label",
    "label2"
  ],
  background: ["background"],
  title: ["title", "title2"],
  title2: ["title2"],
  body: ["body"],
  button: [
    "button",
    "labeledCentered",
    "background2",
    "border",
    "label",
    "label2"
  ],
  labeledCentered: [
    "labeledCentered",
    "background2",
    "border",
    "label",
    "label2"
  ],
  background2: ["background2"],
  border: ["border"],
  label: ["label", "label2"],
  label2: ["label2"],
  button2: [
    "button2",
    "labeledCentered2",
    "background3",
    "border2",
    "label3",
    "label4"
  ],
  labeledCentered2: [
    "labeledCentered2",
    "background3",
    "border2",
    "label3",
    "label4"
  ],
  background3: ["background3"],
  border2: ["border2"],
  label3: ["label3", "label4"],
  label4: ["label4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  iPhone11ProMax5: "div";
  screenShot20210714At3392: "div";
  rectangle1: "div";
  avatar: "div";
  miscIconsBackground: "div";
  iconsButton: "div";
  _01: "div";
  textOnlyWithButton: "div";
  background: "div";
  title: "div";
  title2: "div";
  body: "div";
  button: "div";
  labeledCentered: "div";
  background2: "div";
  border: "div";
  label: "div";
  label2: "div";
  button2: "div";
  labeledCentered2: "div";
  background3: "div";
  border2: "div";
  label3: "div";
  label4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReport__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReport__VariantsArgs;
    args?: PlasmicReport__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicReport__Fetches;
  } & Omit<PlasmicReport__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReport__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicReport__ArgProps,
      internalVariantPropNames: PlasmicReport__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicReport__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReport";
  } else {
    func.displayName = `PlasmicReport.${nodeName}`;
  }
  return func;
}

export const PlasmicReport = Object.assign(
  // Top-level PlasmicReport renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iPhone11ProMax5: makeNodeComponent("iPhone11ProMax5"),
    screenShot20210714At3392: makeNodeComponent("screenShot20210714At3392"),
    rectangle1: makeNodeComponent("rectangle1"),
    avatar: makeNodeComponent("avatar"),
    miscIconsBackground: makeNodeComponent("miscIconsBackground"),
    iconsButton: makeNodeComponent("iconsButton"),
    _01: makeNodeComponent("_01"),
    textOnlyWithButton: makeNodeComponent("textOnlyWithButton"),
    background: makeNodeComponent("background"),
    title: makeNodeComponent("title"),
    title2: makeNodeComponent("title2"),
    body: makeNodeComponent("body"),
    button: makeNodeComponent("button"),
    labeledCentered: makeNodeComponent("labeledCentered"),
    background2: makeNodeComponent("background2"),
    border: makeNodeComponent("border"),
    label: makeNodeComponent("label"),
    label2: makeNodeComponent("label2"),
    button2: makeNodeComponent("button2"),
    labeledCentered2: makeNodeComponent("labeledCentered2"),
    background3: makeNodeComponent("background3"),
    border2: makeNodeComponent("border2"),
    label3: makeNodeComponent("label3"),
    label4: makeNodeComponent("label4"),

    // Metadata about props expected for PlasmicReport
    internalVariantProps: PlasmicReport__VariantProps,
    internalArgProps: PlasmicReport__ArgProps
  }
);

export default PlasmicReport;
/* prettier-ignore-end */
