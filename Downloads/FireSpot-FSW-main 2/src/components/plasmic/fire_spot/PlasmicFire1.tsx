// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iaGC8N7icN64RQS5kdk5ev
// Component: gdriquE7Kj
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FireInfo from "../../FireInfo"; // plasmic-import: fRykAJCV3m/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_fire_spot.module.css"; // plasmic-import: iaGC8N7icN64RQS5kdk5ev/projectcss
import * as sty from "./PlasmicFire1.module.css"; // plasmic-import: gdriquE7Kj/css

import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: saqBp-KweY/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: _hIlKDMChB/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: lIZFbyKS7s/icon
import HomeIcon from "./icons/PlasmicIcon__Home"; // plasmic-import: F1GpC1vB1p_/icon
import Polygon1Icon from "./icons/PlasmicIcon__Polygon1"; // plasmic-import: 0k0WA1LIx4K/icon
import AlertCircleIcon from "./icons/PlasmicIcon__AlertCircle"; // plasmic-import: vAuCRuqwxP/icon
import Vector5Icon from "./icons/PlasmicIcon__Vector5"; // plasmic-import: IBr-aXC3d5G/icon
import ellipse5XzgPrwEc from "./images/ellipse5.svg"; // plasmic-import: xzgPRW_EC/picture
import ellipse2AQ4Pc9YfmM from "./images/ellipse2.svg"; // plasmic-import: aQ4PC9yfmM/picture

export type PlasmicFire1__VariantMembers = {};

export type PlasmicFire1__VariantsArgs = {};
type VariantPropType = keyof PlasmicFire1__VariantsArgs;
export const PlasmicFire1__VariantProps = new Array<VariantPropType>();

export type PlasmicFire1__ArgsType = {};
type ArgPropType = keyof PlasmicFire1__ArgsType;
export const PlasmicFire1__ArgProps = new Array<ArgPropType>();

export type PlasmicFire1__OverridesType = {
  root?: p.Flex<"div">;
  iPhone11ProMax3?: p.Flex<"div">;
  screenShot20210714At3392?: p.Flex<"div">;
  rectangle1?: p.Flex<"div">;
  avatar?: p.Flex<"div">;
  miscIconsBackground?: p.Flex<"div">;
  iconsButton?: p.Flex<"div">;
  fireInfo?: p.Flex<typeof FireInfo>;
};

export interface DefaultFire1Props {
  className?: string;
}

function PlasmicFire1__RenderFunc(props: {
  variants: PlasmicFire1__VariantsArgs;
  args: PlasmicFire1__ArgsType;
  overrides: PlasmicFire1__OverridesType;
  dataFetches?: PlasmicFire1__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"iPhone11ProMax3"}
            data-plasmic-override={overrides.iPhone11ProMax3}
            className={classNames(defaultcss.all, sty.iPhone11ProMax3)}
          >
            <div
              data-plasmic-name={"screenShot20210714At3392"}
              data-plasmic-override={overrides.screenShot20210714At3392}
              className={classNames(
                defaultcss.all,
                sty.screenShot20210714At3392
              )}
            />

            <div
              data-plasmic-name={"rectangle1"}
              data-plasmic-override={overrides.rectangle1}
              className={classNames(defaultcss.all, sty.rectangle1)}
            />

            <div
              data-plasmic-name={"avatar"}
              data-plasmic-override={overrides.avatar}
              className={classNames(defaultcss.all, sty.avatar)}
            >
              <div
                data-plasmic-name={"miscIconsBackground"}
                data-plasmic-override={overrides.miscIconsBackground}
                className={classNames(defaultcss.all, sty.miscIconsBackground)}
              >
                <div
                  data-plasmic-name={"iconsButton"}
                  data-plasmic-override={overrides.iconsButton}
                  className={classNames(defaultcss.all, sty.iconsButton)}
                />
              </div>

              <VectorIcon
                className={classNames(defaultcss.all, sty.svg__vAkm9)}
                role={"img"}
              />
            </div>

            <Vector2Icon
              className={classNames(defaultcss.all, sty.svg__g7ABg)}
              role={"img"}
            />

            <Vector3Icon
              className={classNames(defaultcss.all, sty.svg__bjgpw)}
              role={"img"}
            />

            <HomeIcon
              className={classNames(defaultcss.all, sty.svg__lGruP)}
              role={"img"}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img___91TeL)}
              role={"img"}
              src={ellipse5XzgPrwEc}
            />

            <Polygon1Icon
              className={classNames(defaultcss.all, sty.svg___9KMhe)}
              role={"img"}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__ionQu)}
              role={"img"}
              src={ellipse2AQ4Pc9YfmM}
            />

            <AlertCircleIcon
              className={classNames(defaultcss.all, sty.svg__w6Ag)}
              role={"img"}
            />

            <AlertCircleIcon
              className={classNames(defaultcss.all, sty.svg__yEg2N)}
              role={"img"}
            />

            <FireInfo
              data-plasmic-name={"fireInfo"}
              data-plasmic-override={overrides.fireInfo}
              className={classNames("__wab_instance", sty.fireInfo)}
            />

            <Vector5Icon
              className={classNames(defaultcss.all, sty.svg__mcJbK)}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "iPhone11ProMax3",
    "screenShot20210714At3392",
    "rectangle1",
    "avatar",
    "miscIconsBackground",
    "iconsButton",
    "fireInfo"
  ],
  iPhone11ProMax3: [
    "iPhone11ProMax3",
    "screenShot20210714At3392",
    "rectangle1",
    "avatar",
    "miscIconsBackground",
    "iconsButton",
    "fireInfo"
  ],
  screenShot20210714At3392: ["screenShot20210714At3392"],
  rectangle1: ["rectangle1"],
  avatar: ["avatar", "miscIconsBackground", "iconsButton"],
  miscIconsBackground: ["miscIconsBackground", "iconsButton"],
  iconsButton: ["iconsButton"],
  fireInfo: ["fireInfo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  iPhone11ProMax3: "div";
  screenShot20210714At3392: "div";
  rectangle1: "div";
  avatar: "div";
  miscIconsBackground: "div";
  iconsButton: "div";
  fireInfo: typeof FireInfo;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFire1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFire1__VariantsArgs;
    args?: PlasmicFire1__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFire1__Fetches;
  } & Omit<PlasmicFire1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFire1__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFire1__ArgProps,
      internalVariantPropNames: PlasmicFire1__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFire1__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFire1";
  } else {
    func.displayName = `PlasmicFire1.${nodeName}`;
  }
  return func;
}

export const PlasmicFire1 = Object.assign(
  // Top-level PlasmicFire1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iPhone11ProMax3: makeNodeComponent("iPhone11ProMax3"),
    screenShot20210714At3392: makeNodeComponent("screenShot20210714At3392"),
    rectangle1: makeNodeComponent("rectangle1"),
    avatar: makeNodeComponent("avatar"),
    miscIconsBackground: makeNodeComponent("miscIconsBackground"),
    iconsButton: makeNodeComponent("iconsButton"),
    fireInfo: makeNodeComponent("fireInfo"),

    // Metadata about props expected for PlasmicFire1
    internalVariantProps: PlasmicFire1__VariantProps,
    internalArgProps: PlasmicFire1__ArgProps
  }
);

export default PlasmicFire1;
/* prettier-ignore-end */
